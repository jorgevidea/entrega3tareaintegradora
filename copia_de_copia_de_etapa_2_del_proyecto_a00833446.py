# -*- coding: utf-8 -*-
"""Copia de Copia de Etapa 2 del proyecto A00833446.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r715UcverDSqwlc9DzWtxHa4TiEJVc64

Nombre: Jorge Ricardo Videa Paz

Matrícula: A00833446

Liga: https://colab.research.google.com/drive/1exKj7Tt6vvzKm8fT-UtHIjkwK7Q4Btk0?authuser=6#scrollTo=HVVrRA9MhbEx

Materia: Pensamiento Computacional para la ingeniería

Profesor: Profesor Germán Domínguez

Fecha: 26 de septiembre de 2021

Descripción del problema y su solución.

Con la llegada de la pandemia, el uso de la tecnología ha aumentado drásticamente dada las circunstancias que ésta nos ha impuesto. Circunstancias como el distanciamiento social ya la cuarentena, que significan un contacto humano menor, y con esto, un auge en la comunicación en línea y propagación de información por medio del internet. El caso es el medio de almacenar información en físico cada vez queda más en el pasado y en lo obsoleto. 

Pero la pandemia ha causado que muchos datos se alteren, y todos estos datos, claramente, tienen que ser documentados, por eso es ahora más que nunca es importante saber no solo usar computadores, sino también como almacenar información en éstas. Ahora lo que se nos propone es desarrollar un sistema que ayude a almacenar estos datos de las enfermedades.

Hablando acerca de la funcionalidad del programa, éste fue programado usando la ayuda de Google Colab, el cual usa el lenguaje de Python como funcionamiento. Entre las funciones utilizadas se encuentran: print, listas, def, if y elifs, y en el futuro del sistema, se incluirán otros como el ciclo while, for y el uso de los strings. La primero que hace el sistema cuando se abre es desplegar el menú en donde se encuentran todas sus opciones disponibles, tiene 7 opciones y si elige un número afuera de esas variables el sistema no seguirá.

Entre las enfermedades que vamos a estar cubriendo están: Diabetes, hipertensión, enfermedades del corazón, cáncer y tabaquismo. Otros datos importantes también se almacenarán, como la edad, estatura, el número de departamento, el id, todos estos para poder calcular otras cosas. Entre las funciones que se destacará el sistema, incluyen:

•	Poder dar de alta a un empleado

•	Calcular el IMC del empleado

•	Consultar a un empleado

•	Reporte de todos los empleados

•	Reporte de empleados por departamento

Cabe aclarar que este sistema esta diseñado para apoyar a todo tipo de empresa que quiera tener un control ordenado de la salud y el bienestar de sus empleados. La idea general es que se distribuya por todas las partes del mundo, por eso también se tiene en cuenta que el programa sea fácil de no solo de usar, sino también de leer y editar al antojo del que lo posee. Esto se hace para así poder hacer una pequeña contribución a los daños que ha hecho esta pandemia, ya que si nosotros difundimos un programa accesible y asequible se va a brindar luz a la programación y lo bello de ésta.

---
"""

empleados = []
lista_estados_imc = ["Delgadez severa","Delgadez moderada","Delgadez aceptable","Peso normal","Pro-obeso riesgo","Obeso tipo I (riesgo moderado)","Obeso tipo II (riesgo severo)","Obeso tipo III (riesgo muy severo)"]
lista_contador_estados = [0,0,0,0,0,0,0,0]
estado_imc = 0
posicion_contador_imc = 0
lista_contador_enfermedades = [0,0,0,0,0,0]
DIABETES = 5
HIPERTENSION = 6 
CORAZON = 7
CANCER = 8
TABAQUISMO = 9
VACUNA_COVID = 10

#Función 2.1 = Almacenar la información del empleado en una matriz. (2.1 porque es de la entrega 2)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
def alta_empleado():
 
  global lista_contador_estados
  global empleados
  global estado_imc
  global lista_contador_enfermedades
  global lista_estados_imc
  global posicion_contador_imc

  while True:
    lista_empleados = []
    
    print("Alta de empleado")
    id = int(input("Teclea el id del empleado: "))
    if id < 0:
      print("Error, ingresa una edad valida.")
      break

    nombre = input("Teclea el nombre del empleado: ") 
    
    edad = int(input("Teclea la edad del empleado: "))
    if edad > 110 or edad < 0:
      print("Error, ingresa una edad valida.")
      break

    peso = int(input("Teclea el peso (Kg): "))
    if peso > 500 or peso < 0:
      print("Error, ingresa un peso valido.")
      break

    estatura = float(input("Teclea la estatura (Mts.): "))
    if estatura > 3 or estatura < 0:
      print("Error, ingresa una estatura valida.")
      break

    diabetes = int(input("¿Su empleado tiene diabetes 1-Si 0-No ? : ")) 
    if diabetes > 1 or diabetes < 0:
      print("Error, ingresa una respuesta valida.")
      break

    if diabetes == 1:
      diabetes = "Diabetes"
      lista_contador_enfermedades[0] += 1

    if diabetes == 0:
      diabetes = "_"*10

    hipertension = int(input("¿Su empleado tiene hipertensión 1-Si 0-No?: "))
    if hipertension > 1 or hipertension < 0:
      print("Error, ingresa una respuesta valida.")
      break

    if hipertension == 1:
      hipertension = "Hipertensión"
      lista_contador_enfermedades[1] += 1

    if hipertension == 0:
      hipertension = "_"*10  

    corazon = int(input("¿Su empleado tiene enfermedad de corazón 1-Si 0-No?: "))
    if corazon > 1 or corazon < 0:
      print("Error, ingresa una respuesta valida.")
      break

    if corazon == 1:
      corazon = "Corazón"
      lista_contador_enfermedades[2] += 1

    if corazon == 0:
      corazon = "_"*10  
    
    cancer = int(input("¿Su empleado tiene algun tipo de cáncer 1-Si 0-No?: "))
    if cancer > 1 or cancer < 0:
      print("Error, ingresa una respuesta válida.")
      break

    if cancer == 1:
      cancer = "Cáncer"
      lista_contador_enfermedades[3] += 1

    if cancer == 0:
      cancer = "_"*10

    tabaquismo = int(input("¿Su empleado tiene tabaquismo 1-Si O-No?: " ))
    if tabaquismo > 1 or tabaquismo < 0:
      print("Error, ingresa una respuesta válida.")
      break     

    if tabaquismo == 1:
      tabaquismo = "Tabaquismo"
      lista_contador_enfermedades[4] += 1

    if tabaquismo == 0:
      tabaquismo = "_"*10

    vacuna_covid = int(input("¿Su empleado ya se ha vacunado en contra del covid-19 1-Si O-No?: "))
    if vacuna_covid > 1 or vacuna_covid < 0:
      print("Error, ingresa una respuesta válida.")
      break

    if vacuna_covid == 1:
      vacuna_covid = "Con Vacuna"
      lista_contador_enfermedades[5] += 1

    if vacuna_covid == 0:
      vacuna_covid = "_"*10

    departamento = int(input("Teclea el número de departamento de su empleado: "))     
    if departamento < 1:
      print("Error, ingresa una respuesta válida.")
      break 

    imc = round((peso / estatura**2),2)

    if imc < 16:
      estado_imc = lista_estados_imc[0]
      lista_contador_estados[0] += 1
      posicion_contador_imc = 0

    elif imc >= 16 and imc <= 16.99:
      estado_imc = lista_estados_imc[1]
      lista_contador_estados[1] += 1
      posicion_contador_imc = 1

    elif imc >= 17 and imc <= 18.49:
      estado_imc = lista_estados_imc[2]
      lista_contador_estados[2] += 1
      posicion_contador_imc = 2

    elif imc >= 18.5 and imc <= 24.49:
      estado_imc = lista_estados_imc[3]
      lista_contador_estados[3] += 1
      posicion_contador_imc = 3

    elif imc >= 25 and imc <= 29.99:
      estado_imc = lista_estados_imc[4]
      lista_contador_estados[4] += 1
      posicion_contador_imc = 4

    elif imc >= 30 and imc <= 34.99:
      estado_imc = lista_estados_imc[5]
      lista_contador_estados[5] += 1
      posicion_contador_imc = 5

    elif imc >= 35 and imc <= 39.99:
      estado_imc = lista_estados_imc[6]
      lista_contador_estados[6] += 1
      posicion_contador_imc = 6

    elif imc >= 40:
      estado_imc = lista_estados_imc[7]
      lista_contador_estados[7] += 1
      posicion_contador_imc = 7

    lista_empleados = [id, nombre, edad, peso, estatura, diabetes, hipertension, corazon, cancer, tabaquismo, vacuna_covid, departamento, imc, estado_imc, lista_contador_estados, posicion_contador_imc]

    print(f"""
    Su empleado se ha guardado exitosmente.
    id = {id}
    nombre = {nombre}
    edad = {edad} años
    peso = {peso} kg
    estatura = {estatura} mts.
    NOTA: RECUERDE QUE LAS RESPUESTAS DE LOS PRÓXIMOS DATOS SE DEFINEN COMO:
    La enfermedad = Tiene la enfermedad y No tiene la enfermedad = '__________'
    diabetes = {diabetes}
    Hipertensión = {hipertension}
    Enfermedad de corazón = {corazon}
    Cáncer = {cancer}
    Tabaquismo = {tabaquismo}
    Vacuna de Covid-19 = {vacuna_covid}
    Departamento = {departamento}
       """)
    empleados.append(lista_empleados) 
    break
global empleados

nombre_archivo = "preguntas_guardadas.txt"
def leer_archivo(nombre_archivo):
  
  with open(nombre_archivo, "r") as archivo: 
    
    contenido = archivo.readlines() 

    for elemento in contenido: 
      linea = elemento.split(",") 
      empleados.append(linea) 
leer_archivo(nombre_archivo)



def guardar_archivo(nombre_archivo):

  with open("preguntas_guardadas.txt", "w") as archivo: 

    for empleado in empleados:
      empleado[0] = str(empleado[0]) 
      empleado[2] = str(empleado[2])
      empleado[3] = str(empleado[3])  
      empleado[4] = str(empleado[4])
      empleado[5] = str(empleado[5])
      empleado[6] = str(empleado[6])
      empleado[7] = str(empleado[7])
      empleado[8] = str(empleado[8])
      empleado[9] = str(empleado[9])
      empleado[10] = str(empleado[10])
      empleado[11] = str(empleado[11])
      empleado[12] = str(empleado[12])
      empleado[13] = str(empleado[13])
      empleado[14] = str(empleado[14])
      empleado[15] = str(empleado[15])

      texto = ",".join(empleado) 
      archivo.write(texto + "\n") 
guardar_archivo(nombre_archivo)

empleados = leer_archivo(nombre_archivo) 



#Función 2.2 = Calcular IMC del empleado así como también imprimir una tabla con los datos de IMCs de todos los empleados.
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
def calcular_imc():
  global empleados
  global lista_contador_estados
  global posicion_contador_imc  
  global lista_estados_imc                                                   

  print(f"Clasificación imc                  IMC    ID    Nombre              Peso Altura                     Enfermedades                                        Vacuna")
  for empleado in range(len(empleados)):
  
    print(f"{empleados[empleado][13]:<35}{empleados[empleado][12]:<8}{empleados[empleado][0]:<5}{empleados[empleado][1]:<22}{empleados[empleado][3]:<5}{empleados[empleado][4]:<5} {empleados[empleado][5]:<13} {empleados[empleado][6]:<13} {empleados[empleado][7]:<13} {empleados[empleado][8]:<13} {empleados[empleado][9]:<13} {empleados[empleado][10]:<13}")

  print(f"                                                                                                    Diagnóstico       Cantidad        Porcentaje")
  for empleado in range(len(empleados)):
    porcentaje_imc = round((int(lista_contador_estados[empleados[empleado][15]]) / len(empleados) * 100),2)
    print(f"{empleados[empleado][13]:>114}{lista_contador_estados[empleados[empleado][15]]:>8}{porcentaje_imc:>17}%")

  print(f"                                                                                                        Total  empleados {len(empleados)}")

#Función 2.3 = Actualizar la información de un empleado el cual desee el usuario.
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
def actualizar_empleado():
  global empleados 
  while True:
    datonuevo_id = int(input("Ingresa el id del empleado el cual quieras cambiar la información: "))
    
    for empleado in range(len(empleados)):

      id = empleados[empleado][0]

      if datonuevo_id == id:
        print("Ese id sí existe: ")
      
      else: 
        print("Ese id no existe, inténtalo de nuevo.")
        break

    print("INGRESA SOLAMENTE UN NÚMERO: \n1 = ID   2 = Nombre   3 = Edad   4 = Peso  5 = Estatura   6 = Diabetes   7 = Hipertensión   \n8 = Enfermedad de corazón   9 = Cáncer   10 = Tabaquismo   11 = Vacuna de Covid   12 = Departamento")
    print(f"""
    id = {empleados[datonuevo_id - 1][0]}
    Nombre = {empleados[datonuevo_id - 1][1]} 
    Edad = {empleados[datonuevo_id- 1][2]} años
    Peso = {empleados[datonuevo_id- 1][3]} kg
    Estatura = {empleados[datonuevo_id- 1][4]} mts.
    Diabetes = {empleados[datonuevo_id- 1][5]}
    Hipertensión = {empleados[datonuevo_id- 1][6]}
    Enfermedad de corazón = {empleados[datonuevo_id- 1][7]}
    Cáncer = {empleados[datonuevo_id- 1][8]}
    Tabaquismo = {empleados[datonuevo_id- 1][9]}
    Vacuna de Covid-19 = {empleados[datonuevo_id- 1][10]}
    Departamento = {empleados[datonuevo_id- 1][11]}
    """)
    dato = input("¿Qué dato del empleado deseas cambiar? o, presione el botón 'ENTER' para no hacer ningún cambio y guardar los datos.: ")

    if dato == "":
      print("Sus datos seguirán siendo lo mismo.")
      print(f"""
    id = {empleados[datonuevo_id - 1][0]}
    Nombre = {empleados[datonuevo_id - 1][1]} 
    Edad = {empleados[datonuevo_id- 1][2]} años
    Peso = {empleados[datonuevo_id- 1][3]} kg
    Estatura = {empleados[datonuevo_id- 1][4]} mts.
    Diabetes = {empleados[datonuevo_id- 1][5]}
    Hipertensión = {empleados[datonuevo_id- 1][6]}
    Enfermedad de corazón = {empleados[datonuevo_id- 1][7]}
    Cáncer = {empleados[datonuevo_id- 1][8]}
    Tabaquismo = {empleados[datonuevo_id- 1][9]}
    Vacuna de Covid-19 = {empleados[datonuevo_id- 1][10]}
    Departamento = {empleados[datonuevo_id- 1][11]}
    """)

      break

    dato = int(dato)

    if dato < 1 or dato > 12:
      print("Dato inválido, inténtalo otra vez.")
      break

    empleados[int(datonuevo_id - 1)][dato - 1] = input("Ingresa el dato a cambiar: ")
    respuesta_actualizar = input("¿Está seguro de que quiere actualizar los datos del empleado? Si y No: ")

    if respuesta_actualizar == "Si":
      print(f"""
    id = {empleados[datonuevo_id - 1][0]}
    Nombre = {empleados[datonuevo_id - 1][1]} 
    Edad = {empleados[datonuevo_id- 1][2]} años
    Peso = {empleados[datonuevo_id- 1][3]} kg
    Estatura = {empleados[datonuevo_id- 1][4]} mts.
    Diabetes = {empleados[datonuevo_id- 1][5]}
    Hipertensión = {empleados[datonuevo_id- 1][6]}
    Enfermedad de corazón = {empleados[datonuevo_id- 1][7]}
    Cáncer = {empleados[datonuevo_id- 1][8]}
    Tabaquismo = {empleados[datonuevo_id- 1][9]}
    Vacuna de Covid-19 = {empleados[datonuevo_id- 1][10]}
    Departamento = {empleados[datonuevo_id- 1][11]}
    """)  
      break
    elif respuesta_actualizar == "No":
      break

#Función 2.4 = Imprimir los datos del empleado el cual el usuario llamó.
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
def consultar_empleado():
  global empleados
  global empleados 
  while True: 
    consulta_id = int(input("Ingresa el id del empleado el cual quieras consultar: "))
    
    for empleado in range(len(empleados)):
      
      id = empleados[empleado][0]

    if consulta_id == id:
        print("Ese id sí existe: ")

    elif consulta_id != id:
        print("Ese id no existe, inténtalo de nuevo.")
        break

    print(f"ID = {empleados[consulta_id - 1][0]}, Nombre = {empleados[consulta_id - 1][1]}, Edad = {empleados[consulta_id- 1][2]} años, Peso = {empleados[consulta_id- 1][3]} kg, Estatura = {empleados[consulta_id- 1][4]} mts., Diabetes = {empleados[consulta_id- 1][5]}, Hipertensión = {empleados[consulta_id- 1][6]}, Enfermedad de corazón = {empleados[consulta_id- 1][7]}, Cáncer = {empleados[consulta_id- 1][8]}, Tabaquismo = {empleados[consulta_id- 1][9]}, Vacuna de Covid-19 = {empleados[consulta_id- 1][10]}, Departamento = {empleados[consulta_id- 1][11]}")
    break

#Función 2.5 = Crear un reporte de todos los empleados, así también una tabla con todos los datos de las enfermedades.
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
def crear_reporte_empleados():
  global empleados
  global lista_contador_estados
  global lista_contador_enfermedades
  global posicion_contador_imc 
  global DIABETES
  global HIPERTENSION       
  global CORAZON     
  global CANCER 
  global TABAQUISMO 
  global VACUNA_COVID 
                                        
  for empleado in range(len(empleados)):
  
    print(f"{empleados[empleado][0]:<5}{empleados[empleado][1]:<25}{empleados[empleado][3]:<5}{empleados[empleado][4]:<6}{empleados[empleado][5]:<13}{empleados[empleado][6]:<13} {empleados[empleado][7]:<13} {empleados[empleado][8]:<13} {empleados[empleado][9]:<13} {empleados[empleado][10]:<13}")

  print("Enfermedad    Cantidad    Porcentaje")

  for empleado in empleados:
    suma_enfermedades = sum(lista_contador_enfermedades)
 
  def calcular_porcentaje(indice, clave):
    return round(sum([1 if fila[indice] == clave else 0 for fila in empleados]) / len(empleados) * 100, 2)

  print("Diabetes","       ",lista_contador_enfermedades[0],"         ",calcular_porcentaje(DIABETES, "Diabetes"),"%")
  print("Hipertensión","   ",lista_contador_enfermedades[1],"         ",calcular_porcentaje(HIPERTENSION, "Hipertensión"),"%")
  print("Corazón","        ",lista_contador_enfermedades[2],"         ",calcular_porcentaje(CORAZON, "Corazón"),"%")
  print("Cáncer","         ",lista_contador_enfermedades[3],"         ",calcular_porcentaje(CANCER, "Cáncer"),"%")
  print("Tabaquismo","     ",lista_contador_enfermedades[4],"         ",calcular_porcentaje(TABAQUISMO, "Tabaquismo"),"%")
  print("Vacunados","      ",lista_contador_enfermedades[5],"         ",calcular_porcentaje(VACUNA_COVID, "Con Vacuna"),"%")
  print(f"Total  empleados {len(empleados)}")

#Función 1.1 = Es la función la cual imprime el menú y asigna la función de cada uno. (Función 1.1 porque pertenece a la entrega 1)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
def menu():
  print(
  """  -----------------------------------------
  Sistema de Salud y Bienestar del Empleado
  1. Alta de empleado
  2. Calcular imc de empleados
  3. Cambia información del empleado
  4. Consulta un empleado
  5. Reporte de todos los empleados
  6. Salir del sistema
  ------------------------------------------""")
  num = int(input("Eliga una opcion: "))

  return num

#Función 1.2 = Es la función principal, agarra la opción que se estableció en la función de menú y trabaja desde ahí.  
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------# 
def main():
  while True: 
    num = menu()

    if num < 1 or num > 6:
      print("Respuesta inválida, ingrese una opción valida.")
      continue1

    elif num == 1:
      alta_empleado()

    elif num == 2:
      calcular_imc()

    elif num == 3:
      actualizar_empleado()

    elif num == 4:
      consultar_empleado()

    elif num == 5:
      crear_reporte_empleados()

    elif num == 6:
      print("Gracias por usar este servicio.")
      break
main()

"""Algoritmos:

En este caso, yo realicé 7 algoritmos:

Alta de un empleado: Esta función la realicé para que me guardara todos los datos del empleado, incluí en éstas lo que es el IMC y el estado del IMC para facilitar el código en otras funciones.

Calcular IMC de empleados: Básicamente lo que hace esta función es imprimir ciertos datos del empleado ordenados de manera que sale en el CANVAS. También cabe recalcar que en esta función, también se imprime una tabla con los datos y los porcentajes de los IMCs de los empleados.

Cambiar información del empleado: Lo que primeramente realizaba esta función era pedir el ID al usuario, y después recorría la matriz de todos los empleados en busca del ID que ingresó el usuario. Posteriormente, verificaba si éste existía o no, y si no, pues el programa daba error, pero si sí estaba pues el programa seguía corriendo. Despues el programa despliegaba los datos modificables del empleado en cuestión y pedía al usuario que eligiera un dato al cual cambiar. En este proceso también se podía presionar el botón 'ENTER' pra no realizar ningún cambio. Si el usuario ingresaba un número del 1 al 12 después el programa pedía lo que quería sobreescribir en el programa, y por último, se aseguraba que si querían guardar la lista modificada. 

Consulta un empleado: Los procesos son iguales a los de la función de cambiar empleado solo que en esta función, no se iba a cambiar nada, sino que solamente se imprimiría los datos del empleado el cual el usuario solicitó.

Reporte de empleados: Similar a la función de calcular IMC, lo que hace esta función es imprimir los datos de todos los empleados en orden dado, solo que esta vez no iba a haber tabla de IMC, sino de enfermedades.

Función menú: Lo que hace esta función es desplegar el menú de las funciones mencionadas anteriormente y pedir el dato para que se puedan correr.

Función main: Esta función agarra el dato que agarró la función y menú y corre todo el código en base a la decisión que tomó el usuario. 

Función Calcular porcentaje de enfermedades: Esta función tiene el proposito de, como su nombre lo dice, calcular el porcentaje de enfermedades, esto se realiza por medio de agarrar la lista de contadores de enfermedades y dividiendola por la cantidad de empleados. Se hizo principalmente para facilitar el código.

Plan de Pruebas:

Pues para el plan de pruebas lo que hice fue primero que todo agregar solamente un empleado a la matriz de empleados, posteriormente, decidí pasar por todas las funciones. Después, agregué a otro empleado e hice lo mismo, lo corrí por todas las funciones, y como se puede apreciar, funciona.

###Reflexion

Con la entrega uno y dos me sentì bastante entusiasmado porque sentí que era un reto en lo que yo me podía medir a mí mismo, me estrecé bastante en ciertos punto pero en lo genera, siento que me fue bien. Ya a la hora de la etapa tres, estuve completamente perdido y no supe qué hacer.
"""